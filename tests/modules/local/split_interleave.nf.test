nextflow_process {
    name "Test Process SPLIT_INTERLEAVE"
    script "modules/local/split_interleave.nf"
    process "SPLIT_INTERLEAVE"

    setup {
        run("COMPILE_BINARY") {
            script "modules/local/compile_binary.nf"
            process {
                """
                input[0] = file("${projectDir}/lib/split_interleave_fastq.c")
                input[1] = file("${projectDir}/lib/Makefile")
                """
            }
        }
    }

    test("Should interleave and compress FASTQ files successfully") {
        when {
            process {
                """
                input[0] = tuple(
                    [ id: 'test', read_pairs_per_siz: 1000, outdir: 'tests/output/' ],
                    file('${projectDir}/tests/data/test01_1.fastq.gz'),
                    file('${projectDir}/tests/data/test01_2.fastq.gz')
                )
                input[1] = COMPILE_BINARY.out.binary
                """
            }
        }
        then {
            assert process.success
            // process.out is expected to be a list containing one tuple
            assert process.out.size() == 1
            def resultTuple = process.out[0][0]
            // Each tuple should contain exactly two elements: metadata and output file list
            assert resultTuple.size() == 2
            def meta = resultTuple[0]
            def outFiles = resultTuple[1]
            assert meta.id == 'test'
            // Verify that at least one output file is produced and ends with ".fastq.zst"
            assert outFiles.size() > 0
            outFiles.each { f ->
                assert f.toString().endsWith(".fastq.zst")
            }
        }
    }

    test("Should fail with missing FASTQ file") {
        when {
            process {
                """
                // Provide a non-existent FASTQ file to trigger a failure.
                input[0] = tuple(
                    [ id: 'test', read_pairs_per_siz: 1000, outdir: 'tests/output/' ],
                    file('${projectDir}/tests/data/nonexistent_1.fastq.gz'),
                    file('${projectDir}/tests/data/nonexistent_2.fastq.gz')
                )
                input[1] = COMPILE_BINARY.out.binary
                """
            }
        }
        then {
            assert process.failed
        }
    }
}
